{
  "checkem": {
    "fields": [
      {
        "name": "-rand",
        "value": "Generates 9 random digits rather than fetching your timestamp"
      }
    ]
  },
  "collect": {
    "fields": [
      {
        "name": "-digraphs",
        "value": "Use the collected digraphs to generate the response"
      },
      {
        "name": "--channel=`ChannelResolvable`",
        "value": "The channel to attach the message collecter to\nDefault: random text channel"
      },
      {
        "name": "--time=`number(m|s)`",
        "value": "How long to collect messages for; Specify minutes or seconds\nDefault: `1m`"
      }
    ]
  },
  "connect4": {
    "fields": [
      {
        "name": "new --width=`number` --height=`number`",
        "value": "Create a new board\nshorthand = n\nDefaults: width = `7`, height = `6`"
      },
      {
        "name": "join `marker`",
        "value": "Join the active game using the specified `marker` if any\nshorthand = j\nDefault: marker = random circle emoji"
      },
      {
        "name": "place `columnNumber`",
        "value": "During your turn, drops your peice on the board at the specified spot\nshorthand = p"
      },
      {
        "name": "list",
        "value": "List the players, the turn order, and their marker"
      },
      {
        "name": "kick `GuildMemberResolvable`",
        "value": "Unconditionally remove the given player from the game\n`GuildMemberResolvable` is an ID, name, or nickname"
      },
      {
        "name": "reset",
        "value": "Unconditionally resets the game and players"
      }
    ]
  },
  "custom": {
    "fields": [
      {
        "name": "list",
        "value": "Display all custom commands\nCommands in `lib/` have been committed"
      },
      {
        "name": "show <command name>",
        "value": "Display the source code of the specified command\n<command name> = text"
      },
      {
        "name": "new <command name>",
        "value": "Creates a new command named after the given name. New commands are initialized with a template\n<command name> = text"
      },
      {
        "name": "commit <command name>",
        "value": "Loads the given command into Bean-Stalk\n<command name> = text"
      },
      {
        "name": "edit <command name> <sed expression>",
        "value": "Run a [GNU sed](https://www.gnu.org/software/sed) script on the specified command\n<command name> = text\n<sed expression> = text\nExample <sed expression> = s/\"foo\"/\"bar\"/g"
      },
      {
        "name": "append <command name> <?line number> <code>",
        "value": "Appends <code> to the end of the specified command; Optionally at <?line number>\n<command name> = text\n<?line number> = number\n<code> = javascript code\nDefaults: <?line number> = EOF-1"
      },
      {
        "name": "upload <command name>",
        "value": "not implemented"
      },
      {
        "name": "disable <command name>",
        "value": "not implemented"
      },
      {
        "name": "enable <command name>",
        "value": "not implemented"
      }
    ]
  },
  "dice": {
    "fields": [
      {
        "name": "`number` --count=`number`",
        "value": "That's right, you use the dice size as the subcommand here. Use count to roll multiple dice at once\nCan shorthand count as expression\nDefault: count = `1`"
      },
      {
        "name": "history",
        "value": "Prints the last 16 rolls\nshorthand = hist"
      },
      {
        "name": "proof",
        "value": "Attaches the dice rolling algorithm to silence those who oppose Bean-Stalk"
      }
    ]
  },
  "dndutil": {
    "fields": [
      {
        "name": "load",
        "value": "Loads your character's object to use the next subcommands"
      },
      {
        "name": "check <stat>",
        "value": "Rolls a d20 check against the given stat\n<stat> = text\nOptions: <stat> = con, str, dex, wis, int"
      },
      {
        "name": "save <stat>",
        "value": "Rolls a d20 saving throw against the given stat\n<stat> = text\nOptions: <stat> = con, str, dex, wis, int"
      },
      {
        "name": "show <?what>",
        "value": "Prints your character's meta data\n<?what> = text\nOptions: <?what> = stats, proficiencies, inventory\nDefaults <?what> = null"
      }
    ]
  },
  "echo": {
    "fields": [
      {
        "name": "`Message`",
        "value": "The message to echo/yeet. Defaults to previous message if nothing is given\nIf called as echo: defaults to the current channel\nIf called as yeet: defaults to a random text channel"
      },
      {
        "name": "--channel=`TextChannelResolvable`",
        "value": "Which channel to send the message in. Specify a channel name or ID"
      },
      {
        "name": "--delay=`integer`",
        "value": "How long to wait in seconds until the message is sent\nDefault: 0 seconds"
      }
    ]
  },
  "event": {
    "fields": [
      {
        "name": "create --name=`string` --time=`HH:MM` --location=`ChannelResolvable` --attendees=`list<GuildMemberResolvable>` --roles=`list<GuildRoleResolvable>` --period=`number` --description=`string` -raw -silent --command=`string`",
        "value": "creates a new event with the given variables\n-raw = only output event description\n-silent = don't event details\nThe list variables are space seperated, so you'll need to double quote them if your adding multiple users/roles"
      },
      {
        "name": "join --name=`string` --time=`HH:MM`",
        "value": "join the specified event"
      },
      {
        "name": "show --name=`string` --time=`HH:MM` -loud",
        "value": "display the specified event\n-loud = use this flag to @ the attendees"
      },
      {
        "name": "list",
        "value": "Lists all events"
      },
      {
        "name": "edit --name=`string` --time=`HH:MM` `variable/flag`=`new value`",
        "value": "edit the field of the specified event\nnote: to change the name and time, use newtime and newname as the change variables"
      },
      {
        "name": "leave --name=`string` --time=`HH:MM`",
        "value": "voluntarily exile yourself from the specified event"
      },
      {
        "name": "kick --name=`string` --time=`HH:MM` --attendee=`GuildMemberResolvable`",
        "value": "forcably remove the given attendee from the specified event. Only an event mod can do this"
      },
      {
        "name": "mod --name=`string` --time=`HH:MM` --attendee=`GuildMemberResolvable`",
        "value": "Give a user admin/mod permissions. Only an event mod can do this"
      },
      {
        "name": "delete --name=`string` --time=`HH:MM`",
        "value": "Remove the specified event. Only an event mod can do this"
      }
    ]
  },
  "grantspeak": {
    "fields": [
      {
        "name": "`Message`",
        "value": "convert the given message to Grant Speak\nDefault: if no string is provided, tries to use the message before the command"
      }
    ]
  },
  "help": {
    "fields": [
      {
        "name": "`CommandNameResolvable`",
        "value": "Display the help object for the given command name or alias.\nDefault: display general command help"
      }
    ]
  },
  "javascript": {
    "fields": [
      {
        "name": "`JavaScriptCode`",
        "value": "The JavaScript to execute. stdout and stderr are slowly printed to the message channel as they are recieved"
      },
      {
        "name": "__Additional Notes:__",
        "value": "Below are notes on the behavior of this command"
      },
      {
        "name": "> Process Timeout",
        "value": "Each instance of stdout accrues a 1.5 second tax on the response time. Bean will give your code twice the total amount of tax delay you incur before your process is manually killed"
      },
      {
        "name": "> Detatch stdout buffer",
        "value": "Execute as `js-nl` alias to force stdout to print to new messages rather than buffered together by node. This will make the process take significantly longer and you will be taxed accordingly"
      }
    ]
  },
  "radiant": {
    "fields": [
      {
        "name": "`lineNumber`",
        "value": "Fetch the specified line number\nDefault: random line number in file"
      }
    ]
  },
  "system": {
    "fields": [
      {
        "name": "reload `CommandNameResolvable`",
        "value": "Transpile and reload the specified command or all commands if none specified"
      },
      {
        "name": "die",
        "value": "Log out and kill Bean-Stalk's process"
      },
      {
        "name": "commands",
        "value": "List all available commands"
      },
      {
        "name": "channels",
        "value": "List all cached channels available to bean"
      },
      {
        "name": "uptime",
        "value": "Display Bean's uptime"
      },
      {
        "name": "regex",
        "value": "Turn regex and timestamp reactions on or off\n**Flags:**\n-on = if supplied in command, turns regex responses on\nDefault: off"
      },
      {
        "name": "vrms",
        "value": "List all non-free packages installed on Bean-Stalk's OS"
      },
      {
        "name": "screenfetch",
        "value": "Display Bean-Stalk meta data"
      }
    ]
  },
  "wumpus": {
    "fields": [
      {
        "name": "new `playerMarker`",
        "value": "Create a new board\nshorthand subcommand = n\nDefaults: `playerMarker` = :joy:"
      },
      {
        "name": "move `direction`",
        "value": "Move your player in the specified direction\nshorthand subcommand = m\n`direction` = up, down, left, right, u, d, l, r"
      },
      {
        "name": "shoot `direction`",
        "value": "Shoot your bow in the specified direction\nshorthand subcommand = s\n`direction` = up, down, left, right, u, d, l, r"
      }
    ]
  },
  "voice": {
    "fields": [
      {
        "name": "play -bng -shuffle -clip --channel=`AudioChannelResolvable` `resource`",
        "value": "Play the given `resource` into the audio channel.\n-clip = play an clipped resource\n-bng = play BallisticNG soundtrack (legally obtained btw)\n-shuffle = shuffle the resource list being added\nDefaults: channel = audio channel of member who initiated command"
      },
      {
        "name": "playnext",
        "value": "Play the next resource in the queue\nshorthand = next"
      },
      {
        "name": "setvolume `float=[0.0, 2.0]`",
        "value": "Sets the output volume from 0% to 200%\nUse a floating point number\nshorthand = volume\ndefaults: volume = 1"
      },
      {
        "name": "bitrate `integer`",
        "value": "Sets the output bitrate. This is limited by the server\ndefaults: bitrate = 96"
      },
      {
        "name": "pause",
        "value": "Pause the audio stream"
      },
      {
        "name": "resume",
        "value": "Continue the audio stream"
      },
      {
        "name": "stop",
        "value": "Terminates the audio stream and Bean leaves the audio channel\nalias = leave"
      },
      {
        "name": "listen --user=`GuildMemberResolvable`",
        "value": "Record the audio output of the given user"
      },
      {
        "name": "echo --user=`GuildMemberResolvable`",
        "value": "Play the given user's audio back to the audio channel"
      },
      {
        "name": "clip --user=`GuildMemberResolvable`",
        "value": "Save the current audio recording from the given user to a safe location and decode it to a playable format"
      },
      {
        "name": "clips",
        "value": "Display all audio clips from `clip`"
      },
      {
        "name": "songs",
        "value": "Display the current audio resource queue"
      },
      {
        "name": "listeners",
        "value": "Display all audio recievers from `listen`"
      },
      {
        "name": "destroy --user=`GuildMemberResolvable`",
        "value": "Kill the given user's audio reciever"
      }
    ]
  }
}
